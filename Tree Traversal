import java.util.*;
class Node {
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data=data;
        left = null;
        right = null;
    }
}
class BT{
    static Node root=null;
    public static void preorder(Node root){
        if(root==null){
            return;
        }
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }
    public static void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    public static void postorder(Node root){
        if(root==null){
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+" ");
    }
    public static Node insert(int data){
        Node newNode=new Node(data);
        if(root==null){
            root=newNode;
            return root;
        }
        Queue<Node> queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            Node temp=queue.poll();
            if(temp.left==null){
                temp.left=newNode;
                break;
            }
            else{
                queue.add(temp.left);
            }
            if(temp.right==null){
                temp.right=newNode;
                break;
            }
            else{
                queue.add(temp.right);
            }
        }
        return root;
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        BT tree=new BT();
        for(int i=0;i<n;i++){
            tree.root=tree.insert(sc.nextInt());
        }
        System.out.print("Preorder: ");
        tree.preorder(tree.root);
        System.out.print("\nInorder: ");
        tree.inorder(tree.root);
        System.out.print("\nPostorder: ");
        tree.postorder(tree.root);
    }
}
